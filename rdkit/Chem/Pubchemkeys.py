# $Id$
#
# Copyright (C) 2001-2011 greg Landrum and Rational Discovery LLC
#
#   @@ All Rights Reserved @@
#  This file is part of the RDKit.
#  The contents are covered by the terms of the BSD license
#  which is included in the file license.txt, found at the root
#  of the RDKit source tree.
#
""" SMARTS definitions for the publicly available Pubchem keys
and a Pubchem fingerprinter

I compared the Pubchem fingerprints generated here with those from two
other packages (not MDL, unfortunately). Of course there are
disagreements between the various fingerprints still, but I think
these definitions work pretty well. Some notes:

1) most of the differences have to do with aromaticity
2) there's a discrepancy sometimes because the current RDKit
definitions do not require multiple matches to be distinct. e.g. the
SMILES C(=O)CC(=O) can match the (hypothetical) key O=CC twice in my
definition. It's not clear to me what the correct behavior is.
3) Some keys are not fully defined in the MDL documentation
4) Two keys, 125 and 166, have to be done outside of SMARTS.
5) Key 1 (ISOTOPE) isn't defined

Rev history:
2006 (gl): Original open-source release
May 2011 (gl): Update some definitions based on feedback from Andrew Dalke

"""

from rdkit import Chem
from rdkit.Chem import rdMolDescriptors
from rdkit import DataStructs
# these are SMARTS patterns corresponding to the MDL Pubchem keys
smartsPatts = {
  1: ('[H]',4),  #  4 H
  2: ('[H]',8),  #  8 H
  3: ('[H]',16),  #  16 H
  4: ('[H]',32),  #  32 H
  5: ('[Li]',1),  #  1 Li
  6: ('[Li]',2),  #  2 Li
  7: ('[#5]',1),  #  1 B
  8: ('[#5]',2),  #  2 B
  9: ('[#5]',4),  #  4 B
  10: ('[#6]',2),  #  2 C
  11: ('[#6]',4),  #  4 C
  12: ('[#6]',8),  #  8 C
  13: ('[#6]',16),  #  16 C
  14: ('[#6]',32),  #  32 C
  15: ('[#7]',1),  #  1 N
  16: ('[#7]',2),  #  2 N
  17: ('[#7]',4),  #  4 N
  18: ('[#7]',8),  #  8 N
  19: ('[#8]',1),  #  1 O
  20: ('[#8]',2),  #  2 O
  21: ('[#8]',4),  #  4 O
  22: ('[#8]',8),  #  8 O
  23: ('[#8]',16),  #  16 O
  24: ('[F]',1),  #  1 F
  25: ('[F]',2),  #  2 F
  26: ('[F]',4),  #  4 F
  27: ('[Na]',1),  #  1 Na
  28: ('[Na]',2),  #  2 Na
  29: ('[#14]',1),  #  1 Si
  30: ('[#14]',2),  #  2 Si
  31: ('[#15]',1),  #  1 P
  32: ('[#15]',2),  #  2 P
  33: ('[#15]',4),  #  4 P
  34: ('[#16]',1),  #  1 S
  35: ('[#16]',2),  #  2 S
  36: ('[#16]',4),  #  4 S
  37: ('[#16]',8),  #  8 S
  38: ('[Cl]',1),  #  1 Cl
  39: ('[Cl]',2),  #  2 Cl
  40: ('[Cl]',4),  #  4 Cl
  41: ('[Cl]',8),  #  8 Cl
  42: ('[K]',1),  #  1 K
  43: ('[K]',2),  #  2 K
  44: ('[Br]',1),  #  1 Br
  45: ('[Br]',2),  #  2 Br
  46: ('[Br]',4),  #  4 Br
  47: ('[I]',1),  #  1 I
  48: ('[I]',2),  #  2 I
  49: ('[I]',4),  #  4 I
  50: ('[Be]',1),  #  1 Be
  51: ('[Mg]',1),  #  1 Mg
  52: ('[Al]',1),  #  1 Al
  53: ('[Ca]',1),  #  1 Ca
  54: ('[Sc]',1),  #  1 Sc
  55: ('[Ti]',1),  #  1 Ti
  56: ('[V]',1),  #  1 V
  57: ('[Cr]',1),  #  1 Cr
  58: ('[Mn]',1),  #  1 Mn
  59: ('[Fe]',1),  #  1 Fe
  60: ('[Co]',1),  #  1 Co
  61: ('[Ni]',1),  #  1 Ni
  62: ('[Cu]',1),  #  1 Cu
  63: ('[Zn]',1),  #  1 Zn
  64: ('[Ga]',1),  #  1 Ga
  65: ('[#32]',1),  #  1 Ge
  66: ('[#33]',1),  #  1 As
  67: ('[#34]',1),  #  1 Se
  68: ('[Kr]',1),  #  1 Kr
  69: ('[Rb]',1),  #  1 Rb
  70: ('[Sr]',1),  #  1 Sr
  71: ('[Y]',1),  #  1 Y
  72: ('[Zr]',1),  #  1 Zr
  73: ('[Nb]',1),  #  1 Nb
  74: ('[Mo]',1),  #  1 Mo
  75: ('[Ru]',1),  #  1 Ru
  76: ('[Rh]',1),  #  1 Rh
  77: ('[Pd]',1),  #  1 Pd
  78: ('[Ag]',1),  #  1 Ag
  79: ('[Cd]',1),  #  1 Cd
  80: ('[In]',1),  #  1 In
  81: ('[Sn]',1),  #  1 Sn
  82: ('[Sb]',1),  #  1 Sb
  83: ('[#52]',1),  #  1 Te
  84: ('[Xe]',1),  #  1 Xe
  85: ('[Cs]',1),  #  1 Cs
  86: ('[Ba]',1),  #  1 Ba
  87: ('[Lu]',1),  #  1 Lu
  88: ('[Hf]',1),  #  1 Hf
  89: ('[Ta]',1),  #  1 Ta
  90: ('[W]',1),  #  1 W
  91: ('[Re]',1),  #  1 Re
  92: ('[Os]',1),  #  1 Os
  93: ('[Ir]',1),  #  1 Ir
  94: ('[Pt]',1),  #  1 Pt
  95: ('[Au]',1),  #  1 Au
  96: ('[Hg]',1),  #  1 Hg
  97: ('[Tl]',1),  #  1 Tl
  98: ('[Pb]',1),  #  1 Pb
  99: ('[Bi]',1),  #  1 Bi
  100: ('[La]',1),  #  1 La
  101: ('[Ce]',1),  #  1 Ce
  102: ('[Pr]',1),  #  1 Pr
  103: ('[Nd]',1),  #  1 Nd
  104: ('[Pm]',1),  #  1 Pm
  105: ('[Sm]',1),  #  1 Sm
  106: ('[Eu]',1),  #  1 Eu
  107: ('[Gd]',1),  #  1 Gd
  108: ('[Tb]',1),  #  1 Tb
  109: ('[Dy]',1),  #  1 Dy
  110: ('[Ho]',1),  #  1 Ho
  111: ('[Er]',1),  #  1 Er
  112: ('[Tm]',1),  #  1 Tm
  113: ('[Yb]',1),  #  1 Yb
  114: ('[Tc]',1),  #  1 Tc
  115: ('[U]',1),  #  1 U
  116: ('*~1~*~*1',1),  #  1 any ring size 3
  117: ('c1cc1',1),  #  1 aromatic carbon-only ring size 3
  118: ('n1aa1',1),  #  1 aromatic nitrogen-containing ring size 3
  119: ('[a;!#6]1aa1',1),  #  1 aromatic heteroatom-containing ring size 3
  120: ('C~1~C~C1',1),  #  1 non-aromatic carbon-only ring size 3
  121: ('N~1~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 3
  122: ('[A;!#6]~1~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 3
  123: ('*~1~*~*1',2),  #  2 any ring size 3
  124: ('c1cc1',2),  #  2 aromatic carbon-only ring size 3
  125: ('n1aa1',2),  #  2 aromatic nitrogen-containing ring size 3
  126: ('[a;!#6]1aa1',2),  #  2 aromatic heteroatom-containing ring size 3
  127: ('C~1~C~C1',2),  #  2 non-aromatic carbon-only ring size 3
  128: ('N~1~A~A1',2),  #  2 non-aromatic nitrogen-containing ring size 3
  129: ('[A;!#6]~1~A~A1',2),  #  2 non-aromatic heteroatom-containing ring size 3
  130: ('*~1~*~*~*1',1),  #  1 any ring size 4
  131: ('c1ccc1',1),  #  1 carbon-only ring size 4
  132: ('n1aaa1',1),  #  1 nitrogen-containing ring size 4
  133: ('[a;!#6]1aaa1',1),  #  1 heteroatom-containing ring size 4
  134: ('C~1~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 4
  135: ('N~1~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 4
  136: ('[A;!#6]~1~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 4
  137: ('*~1~*~*~*1',2),  #  2 any ring size 4
  138: ('c1ccc1',2),  #  2 aromatic carbon-only ring size 4
  139: ('n1aaa1',2),  #  2 aromatic nitrogen-containing ring size 4
  140: ('[a;!#6]1aaa1',2),  #  2 aromatic heteroatom-containing ring size 4
  141: ('C~1~C~C~C1',2),  #  2 non-aromatic carbon-only ring size 4
  142: ('N~1~A~A~A1',2),  #  2 non-aromatic nitrogen-containing ring size 4
  143: ('[A;!#6]~1~A~A~A1',2),  #  2 non-aromatic heteroatom-containing ring size 4
  144: ('*~1~*~*~*~*1',1),  #  1 any ring size 5
  145: ('c1cccc1',1),  #  1 aromatic carbon-only ring size 5
  146: ('n1aaaa1',1),  #  1 aromatic nitrogen-containing ring size 5
  147: ('[a;!#6]1aaaa1',1),  #  1 aromatic heteroatom-containing ring size 5
  148: ('C~1~C~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 5
  149: ('N~1~A~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 5
  150: ('[A;!#6]~1A~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 5
  151: ('*~1~*~*~*~*1',2),  #  2 any ring size 5
  152: ('c1cccc1',2),  #  2 aromatic carbon-only ring size 5
  153: ('n1aaaa1',2),  #  2 aromatic nitrogen-containing ring size 5
  154: ('[a;!#6]1aaaa1',2),  #  2 aromatic heteroatom-containing ring size 5
  155: ('C~1~C~C~C~C1',2),  #  2 non-aromatic carbon-only ring size 5
  156: ('N~1~A~A~A~A1',2),  #  2 non-aromatic nitrogen-containing ring size 5
  157: ('[A;!#6]~1A~A~A~A1',2),  #  2 non-aromatic heteroatom-containing ring size 5
  158: ('*~1~*~*~*~*1',3),  #  3 any ring size 5
  159: ('c1cccc1',3),  #  3 aromatic carbon-only ring size 5
  160: ('n1aaaa1',3),  #  3 aromatic nitrogen-containing ring size 5
  161: ('[a;!#6]1aaaa1',3),  #  3 aromatic heteroatom-containing ring size 5
  162: ('C~1~C~C~C~C1',3),  #  3 non-aromatic carbon-only ring size 5
  163: ('N~1~A~A~A~A1',3),  #  3 non-aromatic nitrogen-containing ring size 5
  164: ('[A;!#6]~1A~A~A~A1',3),  #  3 non-aromatic heteroatom-containing ring size 5
  165: ('*~1~*~*~*~*1',4),  #  4 any ring size 5
  166: ('c1cccc1',4),  #  4 aromatic carbon-only ring size 5
  167: ('n1aaaa1',4),  #  4 aromatic nitrogen-containing ring size 5
  168: ('[a;!#6]1aaaa1',4),  #  4 aromatic heteroatom-containing ring size 5
  169: ('C~1~C~C~C~C1',4),  #  4 non-aromatic carbon-only ring size 5
  170: ('N~1~A~A~A~A1',4),  #  4 non-aromatic nitrogen-containing ring size 5
  171: ('[A;!#6]~1A~A~A~A1',4),  #  4 non-aromatic heteroatom-containing ring size 5
  172: ('*~1~*~*~*~*1',5),  #  5 any ring size 5
  173: ('c1cccc1',5),  #  5 aromatic carbon-only ring size 5
  174: ('n1aaaa1',5),  #  5 aromatic nitrogen-containing ring size 5
  175: ('[a;!#6]1aaaa1',5),  #  5 aromatic heteroatom-containing ring size 5
  176: ('C~1~C~C~C~C1',5),  #  5 non-aromatic carbon-only ring size 5
  177: ('N~1~A~A~A~A1',5),  #  5 non-aromatic nitrogen-containing ring size 5
  178: ('[A;!#6]~1A~A~A~A1',5),  #  5 non-aromatic heteroatom-containing ring size 5
  179: ('*~1~*~*~*~*~*1',1),  #  1 any ring size 6
  180: ('c1ccccc1',1),  #  1 aromatic carbon-only ring size 6
  181: ('n1aaaaa1',1),  #  1 aromatic nitrogen-containing ring size 6
  182: ('[a;!#6]1aaaaa1',1),  #  1 aromatic heteroatom-containing ring size 6
  183: ('C~1~C~C~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 6
  184: ('N~1~A~A~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 6
  185: ('[A;!#6]~1~A~A~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 6
  186: ('*~1~*~*~*~*~*1',2),  #  2 any ring size 6
  187: ('c1ccccc1',2),  #  2 aromatic carbon-only ring size 6
  188: ('n1aaaaa1',2),  #  2 aromatic nitrogen-containing ring size 6
  189: ('[a;!#6]1aaaaa1',2),  #  2 aromatic heteroatom-containing ring size 6
  190: ('C~1~C~C~C~C~C1',2),  #  2 non-aromatic carbon-only ring size 6
  191: ('N~1~A~A~A~A~A1',2),  #  2 non-aromatic nitrogen-containing ring size 6
  192: ('[A;!#6]~1~A~A~A~A~A1',2),  #  2 non-aromatic heteroatom-containing ring size 6
  193: ('*~1~*~*~*~*~*1',3),  #  3 any ring size 6
  194: ('c1ccccc1',3),  #  3 aromatic carbon-only ring size 6
  195: ('n1aaaaa1',3),  #  3 aromatic nitrogen-containing ring size 6
  196: ('[a;!#6]1aaaaa1',3),  #  3 aromatic heteroatom-containing ring size 6
  197: ('C~1~C~C~C~C~C1',3),  #  3 non-aromatic carbon-only ring size 6
  198: ('N~1~A~A~A~A~A1',3),  #  3 non-aromatic nitrogen-containing ring size 6
  199: ('[A;!#6]~1~A~A~A~A~A1',3),  #  3 non-aromatic heteroatom-containing ring size 6
  200: ('*~1~*~*~*~*~*1',4),  #  4 any ring size 6
  201: ('c1ccccc1',4),  #  4 aromatic carbon-only ring size 6
  202: ('n1aaaaa1',4),  #  4 aromatic nitrogen-containing ring size 6
  203: ('[a;!#6]1aaaaa1',4),  #  4 aromatic heteroatom-containing ring size 6
  204: ('C~1~C~C~C~C~C1',4),  #  4 non-aromatic carbon-only ring size 6
  205: ('N~1~A~A~A~A~A1',4),  #  4 non-aromatic nitrogen-containing ring size 6
  206: ('[A;!#6]~1~A~A~A~A~A1',4),  #  4 non-aromatic heteroatom-containing ring size 6
  207: ('*~1~*~*~*~*~*1',5),  #  5 any ring size 6
  208: ('c1ccccc1',5),  #  5 aromatic carbon-only ring size 6
  209: ('n1aaaaa1',5),  #  5 aromatic nitrogen-containing ring size 6
  210: ('[a;!#6]1aaaaa1',5),  #  5 aromatic heteroatom-containing ring size 6
  211: ('C~1~C~C~C~C~C1',5),  #  5 non-aromatic carbon-only ring size 6
  212: ('N~1~A~A~A~A~A1',5),  #  5 non-aromatic nitrogen-containing ring size 6
  213: ('[A;!#6]~1~A~A~A~A~A1',5),  #  5 non-aromatic heteroatom-containing ring size 6
  214: ('*~1~*~*~*~*~*~*1',1),  #  1 any ring size 7
  215: ('c1cccccc1',1),  #  1 aromatic carbon-only ring size 7
  216: ('n1aaaaaa1',1),  #  1 aromatic nitrogen-containing ring size 7
  217: ('[a;!#6]1aaaaaa1',1),  #  1 aromatic heteroatom-containing ring size 7
  218: ('C~1~C~C~C~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 7
  219: ('N~1~A~A~A~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 7
  220: ('[A;!#6]~1~A~A~A~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 7
  221: ('*~1~*~*~*~*~*~*1',2),  #  2 any ring size 7
  222: ('c1cccccc1',2),  #  2 aromatic carbon-only ring size 7
  223: ('n1aaaaaa1',2),  #  2 aromatic nitrogen-containing ring size 7
  224: ('[a;!#6]1aaaaaa1',2),  #  2 aromatic heteroatom-containing ring size 7
  225: ('C~1~C~C~C~C~C~C1',2),  #  2 non-aromatic carbon-only ring size 7
  226: ('N~1~A~A~A~A~A~A1',2),  #  2 non-aromatic nitrogen-containing ring size 7
  227: ('[A;!#6]~1~A~A~A~A~A~A1',2),  #  2 non-aromatic heteroatom-containing ring size 7
  228: ('*~1~*~*~*~*~*~*~*1',1),  #  1 any ring size 8
  229: ('c1ccccccc1',1),  #  1 aromatic carbon-only ring size 8
  230: ('n1aaaaaaa1',1),  #  1 aromatic nitrogen-containing ring size 8
  231: ('[a;!#6]1aaaaaaa1',1),  #  1 aromatic heteroatom-containing ring size 8
  232: ('C~1~C~C~C~C~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 8
  233: ('N~1~A~A~A~A~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 8
  234: ('[A;!#6]~1~A~A~A~A~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 8
  235: ('*~1~*~*~*~*~*~*~*1',2),  #  2 any ring size 8
  236: ('c1ccccccc1',2),  #  2 aromatic carbon-only ring size 8
  237: ('n1aaaaaaa1',2),  #  2 aromatic nitrogen-containing ring size 8
  238: ('[a;!#6]1aaaaaaa1',2),  #  2 aromatic heteroatom-containing ring size 8
  239: ('C~1~C~C~C~C~C~C~C1',2),  #  2 non-aromatic carbon-only ring size 8
  240: ('N~1~A~A~A~A~A~A~A1',2),  #  2 non-aromatic nitrogen-containing ring size 8
  241: ('[A;!#6]~1~A~A~A~A~A~A~A1',2),  #  2 non-aromatic heteroatom-containing ring size 8
  242: ('*~1~*~*~*~*~*~*~*~*1',1),  #  1 any ring size 9
  243: ('c1cccccccc1',1),  #  1 aromatic carbon-only ring size 9
  244: ('n1aaaaaaaa1',1),  #  1 aromatic nitrogen-containing ring size 9
  245: ('[a;!#6]1aaaaaaaa1',1),  #  1 aromatic heteroatom-containing ring size 9
  246: ('C~1~C~C~C~C~C~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 9
  247: ('N~1~A~A~A~A~A~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 9
  248: ('[A;!#6]~1~A~A~A~A~A~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 9
  249: ('*~1~*~*~*~*~*~*~*~*~*1',1),  #  1 any ring size 10
  250: ('c1ccccccccc1',1),  #  1 aromatic carbon-only ring size 10
  251: ('n1aaaaaaaaa1',1),  #  1 aromatic nitrogen-containing ring size 10
  252: ('[a;!#6]1aaaaaaaaa1',1),  #  1 aromatic heteroatom-containing ring size 10
  253: ('C~1~C~C~C~C~C~C~C~C~C1',1),  #  1 non-aromatic carbon-only ring size 10
  254: ('N~1~A~A~A~A~A~A~A~A~A1',1),  #  1 non-aromatic nitrogen-containing ring size 10
  255: ('[A;!#6]~1~A~A~A~A~A~A~A~A~A1',1),  #  1 non-aromatic heteroatom-containing ring size 10
  256: ('[aR]',1),  #  1 aromatic ring
  257: ('[aR;!#6]',1),  #  1 hetero-aromatic ring
  258: ('[aR]',2),  #  2 aromatic rings
  259: ('[aR;!#6]',2),  #  2 hetero-aromatic rings
  260: ('[aR]',3),  #  3 aromatic rings
  261: ('[aR;!#6]',3),  #  3 hetero-aromatic rings
  262: ('[aR]',4),  #  4 aromatic rings
  263: ('[aR;!#6]',4),  #  4 hetero-aromatic rings
  264: ('[Li;!H0]',1),  #  Li-H
  265: ('[Li]~[Li]',1),  #  Li-Li
  266: ('[Li]~[#5]',1),  #  Li-B
  267: ('[Li]~[#6]',1),  #  Li-C
  268: ('[Li]~[#8]',1),  #  Li-O
  269: ('[Li]~[F]',1),  #  Li-F
  270: ('[Li]~[#15]',1),  #  Li-P
  271: ('[Li]~[#16]',1),  #  Li-S
  272: ('[Li]~[Cl]',1),  #  Li-Cl
  273: ('[#5;!H0]',1),  #  B-H
  274: ('[#5]~[#5]',1),  #  B-B
  275: ('[#5]~[#6]',1),  #  B-C
  276: ('[#5]~[#7]',1),  #  B-N
  277: ('[#5]~[#8]',1),  #  B-O
  278: ('[#5]~[F]',1),  #  B-F
  279: ('[#5]~[#6]',1),  #  B-Si
  280: ('[#5]~[#15]',1),  #  B-P
  281: ('[#5]~[#16]',1),  #  B-S
  282: ('[#5]~[Cl]',1),  #  B-Cl
  283: ('[#5]~[Br]',1),  #  B-Br
  284: ('[#6;!H0]',1),  #  C-H
  285: ('[#6]~[#6]',1),  #  C-C
  286: ('[#6]~[#7]',1),  #  C-N
  287: ('[#6]~[#8]',1),  #  C-O
  288: ('[#6]~[F]',1),  #  C-F
  289: ('[#6]~[Na]',1),  #  C-Na
  290: ('[#6]~[Mg]',1),  #  C-Mg
  291: ('[#6]~[Al]',1),  #  C-Al
  292: ('[#6]~[#14]',1),  #  C-Si
  293: ('[#6]~[#15]',1),  #  C-P
  294: ('[#6]~[#16]',1),  #  C-S
  295: ('[#6]~[Cl]',1),  #  C-Cl
  296: ('[#6]~[#33]',1),  #  C-As
  297: ('[#6]~[#34]',1),  #  C-Se
  298: ('[#6]~[Br]',1),  #  C-Br
  299: ('[#6]~[I]',1),  #  C-I
  300: ('[#7;!H0]',1),  #  N-H
  301: ('[#7]~[#7]',1),  #  N-N
  302: ('[#7]~[#8]',1),  #  N-O
  303: ('[#7]~[F]',1),  #  N-F
  304: ('[#7]~[#14]',1),  #  N-Si
  305: ('[#7]~[#15]',1),  #  N-P
  306: ('[#7]~[#16]',1),  #  N-S
  307: ('[#7]~[Cl]',1),  #  N-Cl
  308: ('[#7]~[Br]',1),  #  N-Br
  309: ('[#8;!H0]',1),  #  O-H
  310: ('[#8]~[#8]',1),  #  O-O
  311: ('[#8]~[Mg]',1),  #  O-Mg
  312: ('[#8]~[Na]',1),  #  O-Na
  313: ('[#8]~[Al]',1),  #  O-Al
  314: ('[#8]~[#14]',1),  #  O-Si
  315: ('[#8]~[#15]',1),  #  O-P
  316: ('[#8]~[K]',1),  #  O-K
  317: ('[F]~[#15]',1),  #  F-P
  318: ('[F]~[#16]',1),  #  F-S
  319: ('[Al;!H0]',1),  #  Al-H
  320: ('[Al]~[Cl]',1),  #  Al-Cl
  321: ('[#14;!H0]',1),  #  Si-H
  322: ('[#14]~[#14]',1),  #  Si-Si
  323: ('[#14]~[Cl]',1),  #  Si-Cl
  324: ('[#15;!H0]',1),  #  P-H
  325: ('[#15]~[#15]',1),  #  P-P
  326: ('[#33;!H0]',1),  #  As-H
  327: ('[#33]~[#33]',1),  #  As-As
  328: ('[#6](~Br)(~[#6])',1),  #  C(~Br)(~C)
  329: ('[#6](~Br)(~[#6])(~[#6])',1),  #  C(~Br)(~C)(~C)
  330: ('[#6;!H0](~Br)',1),  #  C(~Br)(~H)
  331: ('c(~Br)(:c)',1),  #  C(~Br)(:C)
  332: ('c(~Br)(:n)',1),  #  C(~Br)(:N)
  333: ('[#6](~[#6])(~[#6])',1),  #  C(~C)(~C)
  334: ('[#6](~[#6])(~[#6])(~[#6])',1),  #  C(~C)(~C)(~C)
  335: ('[#6](~[#6])(~[#6])(~[#6])(~[#6])',1),  #  C(~C)(~C)(~C)(~C)
  336: ('[#6;!H0](~[#6])(~[#6])(~[#6])',1),  #  C(~C)(~C)(~C)(~H)
  337: ('[#6](~[#6])(~[#6])(~[#6])(~[#7])',1),  #  C(~C)(~C)(~C)(~N)
  338: ('[#6](~[#6])(~[#6])(~[#6])(~[#8])',1),  #  C(~C)(~C)(~C)(~O)
  339: ('[#6;!H0](~[#6])(~[#6])(~[#7])',1),  #  C(~C)(~C)(~H)(~N)
  340: ('[#6;!H0](~[#6])(~[#6])(~[#8])',1),  #  C(~C)(~C)(~H)(~O)
  341: ('[#6](~[#6])(~[#6])(~[#7])',1),  #  C(~C)(~C)(~N)
  342: ('[#6](~[#6])(~[#6])(~[#8])',1),  #  C(~C)(~C)(~O)
  343: ('[#6](~[#6])(~Cl)',1),  #  C(~C)(~Cl)
  344: ('[#6;!H0](~[#6])(~Cl)',1),  #  C(~C)(~Cl)(~H)
  345: ('[#6;!H0](~[#6])',1),  #  C(~C)(~H)
  346: ('[#6;!H0](~[#6])(~[#7])',1),  #  C(~C)(~H)(~N)
  347: ('[#6;!H0](~[#6])(~[#8])',1),  #  C(~C)(~H)(~O)
  348: ('[#6;!H0](~[#6])(~[#8])(~[#8])',1),  #  C(~C)(~H)(~O)(~O)
  349: ('[#6;!H0](~[#6])(~[#15])',1),  #  C(~C)(~H)(~P)
  350: ('[#6;!H0](~[#6])(~[#16])',1),  #  C(~C)(~H)(~S)
  351: ('[#6](~[#6])(~I)',1),  #  C(~C)(~I)
  352: ('[#6](~[#6])(~[#7])',1),  #  C(~C)(~N)
  353: ('[#6](~[#6])(~[#8])',1),  #  C(~C)(~O)
  354: ('[#6](~[#6])(~[#16])',1),  #  C(~C)(~S)
  355: ('[#6](~[#6])(~[#14])',1),  #  C(~C)(~Si)
  356: ('c(~[#6])(:c)',1),  #  C(~C)(:C)
  357: ('c(~[#6])(:c)(:c)',1),  #  C(~C)(:C)(:C)
  358: ('c(~[#6])(:c)(:n)',1),  #  C(~C)(:C)(:N)
  359: ('c(~[#6])(:n)',1),  #  C(~C)(:N)
  360: ('c(~[#6])(:n)(:n)',1),  #  C(~C)(:N)(:N)
  361: ('[#6](~Cl)(~Cl)',1),  #  C(~Cl)(~Cl)
  362: ('[#6;!H0](~Cl)',1),  #  C(~Cl)(~H)
  363: ('c(~Cl)(:c)',1),  #  C(~Cl)(:C)
  364: ('[#6](~F)(~F)',1),  #  C(~F)(~F)
  365: ('c(~F)(:c)',1),  #  C(~F)(:C)
  366: ('[#6;!H0](~[#7])',1),  #  C(~H)(~N)
  367: ('[#6;!H0](~[#8])',1),  #  C(~H)(~O)
  368: ('[#6;!H0](~[#8])(~[#8])',1),  #  C(~H)(~O)(~O)
  369: ('[#6;!H0](~[#16])',1),  #  C(~H)(~S)
  370: ('[#6;!H0](~[#14])',1),  #  C(~H)(~Si)
  371: ('[c;!H0](:c)',1),  #  C(~H)(:C)
  372: ('[c;!H0](:c)(:c)',1),  #  C(~H)(:C)(:C)
  373: ('[c;!H0](:c)(:n)',1),  #  C(~H)(:C)(:N)
  374: ('[c;!H0](:n)',1),  #  C(~H)(:N)
  375: ('[#6;!H0;!H1;!H2]',1),  #  C(~H)(~H)(~H)
  376: ('[#6](~[#7])(~[#7])',1),  #  C(~N)(~N)
  377: ('c(~[#7])(:c)',1),  #  C(~N)(:C)
  378: ('c(~[#7])(:c)(:c)',1),  #  C(~N)(:C)(:C)
  379: ('c(~[#7])(:c)(:n)',1),  #  C(~N)(:C)(:N)
  380: ('c(~[#7])(:n)',1),  #  C(~N)(:N)
  381: ('[#6](~[#8])(~[#8])',1),  #  C(~O)(~O)
  382: ('c(~[#8])(:c)',1),  #  C(~O)(:C)
  383: ('c(~[#8])(:c)(:c)',1),  #  C(~O)(:C)(:C)
  384: ('c(~[#16])(:c)',1),  #  C(~S)(:C)
  385: ('c(:c)(:c)',1),  #  C(:C)(:C)
  386: ('c(:c)(:c)(:c)',1),  #  C(:C)(:C)(:C)
  387: ('c(:c)(:c)(:n)',1),  #  C(:C)(:C)(:N)
  388: ('c(:c)(:n)',1),  #  C(:C)(:N)
  389: ('c(:c)(:n)(:n)',1),  #  C(:C)(:N)(:N)
  390: ('c(:n)(:n)',1),  #  C(:N)(:N)
  391: ('[#7](~[#6])(~[#6])',1),  #  N(~C)(~C)
  392: ('[#7](~[#6])(~[#6])(~[#6])',1),  #  N(~C)(~C)(~C)
  393: ('[#7;!H0](~[#6])(~[#6])',1),  #  N(~C)(~C)(~H)
  394: ('[#7;!H0](~[#6])',1),  #  N(~C)(~H)
  395: ('[#7;!H0](~[#6])(~[#7])',1),  #  N(~C)(~H)(~N)
  396: ('[#7](~[#6])(~[#8])',1),  #  N(~C)(~O)
  397: ('n(~[#6])(:c)',1),  #  N(~C)(:C)
  398: ('n(~[#6])(:c)(:c)',1),  #  N(~C)(:C)(:C)
  399: ('[#7;!H0](~[#7])',1),  #  N(~H)(~N)
  400: ('[n;!H0](:c)',1),  #  N(~H)(:C)
  401: ('[n;!H0](:c)(:c)',1),  #  N(~H)(:C)(:C)
  402: ('[#7](~[#8])(~[#8])',1),  #  N(~O)(~O)
  403: ('n(~[#8])(:o)',1),  #  N(~O)(:O)
  404: ('n(:c)(:c)',1),  #  N(:C)(:C)
  405: ('n(:c)(:c)(:c)',1),  #  N(:C)(:C)(:C)
  406: ('[#8](~[#6])(~[#6])',1),  #  O(~C)(~C)
  407: ('[#8;!H0](~[#6])',1),  #  O(~C)(~H)
  408: ('[#8](~[#6])(~[#15])',1),  #  O(~C)(~P)
  409: ('[#8;!H0](~[#16])',1),  #  O(~H)(~S)
  410: ('o(:c)(:c)',1),  #  O(:C)(:C)
  411: ('[#15](~[#6])(~[#6])',1),  #  P(~C)(~C)
  412: ('[#15](~[#8])(~[#8])',1),  #  P(~O)(~O)
  413: ('[#16](~[#6])(~[#6])',1),  #  S(~C)(~C)
  414: ('[#16;!H0](~[#6])',1),  #  S(~C)(~H)
  415: ('[#16](~[#6])(~[#8])',1),  #  S(~C)(~O)
  416: ('[#14](~[#6])(~[#6])',1),  #  Si(~C)(~C)
  417: ('[#6]=,:[#6]',1),  # C=C
  418: ('[#6]#[#6]',1),  # C#C
  419: ('[#6]=,:[#7]',1),  # C=N
  420: ('[#6]#[#7]',1),  # C#N
  421: ('[#6]=,:[#8]',1),  # C=O
  422: ('[#6]=,:[s,S]',1),  # C=S
  423: ('[#7]=,:[#7]',1),  # N=N
  424: ('[#7]=,:[#8]',1),  # N=O
  425: ('[#7]=,:[#15]',1),  # N=P
  426: ('[#15]=,:[#8]',1),  # P=O
  427: ('[#15]=,:[#15]',1),  # P=P
  428: ('[#6]#[#6]-,:[#6]',1),  # C(#C)(-C)
  429: ('[#6;!H0]#[#6]',1),  # C(#C)(-H)
  430: ('[#7]#[#6]-,:[#6]',1),  # C(#N)(-C)
  431: ('[#6](-,:[#6])(-,:[#6])(=,:[#6])',1),  # C(-C)(-C)(=C)
  432: ('[#6](-,:[#6])(-,:[#6])(=,:[#7])',1),  # C(-C)(-C)(=N)
  433: ('[#6](-,:[#6])(-,:[#6])(=,:[#8])',1),  # C(-C)(-C)(=O)
  434: ('[#6](-,:[#6])(Cl)(=,:[#8])',1),  # C(-C)(-Cl)(=O)
  435: ('[#6&!H0](-,:[#6])(=,:[#6])',1),  # C(-C)(-H)(=C)
  436: ('[#6&!H0](-,:[#6])(=,:[#7])',1),  # C(-C)(-H)(=N)
  437: ('[#6&!H0](-,:[#6])(=,:[#8])',1),  # C(-C)(-H)(=O)
  438: ('[#6](-,:[#6])(-,:[#7])(=,:[#6])',1),  # C(-C)(-N)(=C)
  439: ('[#6](-,:[#6])(-,:[#7])(=,:[#7])',1),  # C(-C)(-N)(=N)
  440: ('[#6](-,:[#6])(-,:[#7])(=,:[#8])',1),  # C(-C)(-N)(=O)
  441: ('[#6](-,:[#6])(-,:[#8])(=,:[#8])',1),  # C(-C)(-O)(=O)
  442: ('[#6](-,:[#6])(=,:[#6])',1),  # C(-C)(=C)
  443: ('[#6](-,:[#6])(=,:[#7])',1),  # C(-C)(=N)
  444: ('[#6](-,:[#6])(=,:[#8])',1),  # C(-C)(=O)
  445: ('[#6](Cl)(=,:[#8])',1),  # C(-Cl)(=O)
  446: ('[#6;!H0](-,:[#7])(=,:[#6])',1),  # C(-H)(-N)(=C)
  447: ('[#6;!H0](=,:[#6])',1),  # C(-H)(=C)
  448: ('[#6;!H0](=,:[#7])',1),  # C(-H)(=N)
  449: ('[#6;!H0](=,:[#8])',1),  # C(-H)(=O)
  450: ('[#6](-,:[#7])(=,:[#6])',1),  # C(-N)(=C)
  451: ('[#6](-,:[#7])(=,:[#7])',1),  # C(-N)(=N)
  452: ('[#6](-,:[#7])(=,:[#8])',1),  # C(-N)(=O)
  453: ('[#6](-,:[#8])(=,:[#8])',1),  # C(-O)(=O)
  454: ('[#7](-,:[#6])(=,:[#6])',1),  # N(-C)(=C)
  455: ('[#7](-,:[#6])(=,:[#8])',1),  # N(-C)(=O)
  456: ('[#7](-,:[#8])(=,:[#8])',1),  # N(-O)(=O)
  457: ('[#15](-,:[#8])(=,:[#8])',1),  # P(-O)(=O)
  458: ('[#16](-,:[#6])(=,:[#8])',1),  # S(-C)(=O)
  459: ('[#16](-,:[#8])(=,:[#8])',1),  # S(-O)(=O)
  460: ('[#16](=,:[#8])(=,:[#8])',1),  # S(=O)(=O)
  461: ('[#6]-,:[#6]-,:[#6]#C',1),  # C-C-C#C
  462: ('[#8]-,:[#6]-,:[#6]=,:[#7]',1),  # O-C-C=N
  463: ('[#8]-,:[#6]-,:[#6]=,:[#8]',1),  # O-C-C=O
  464: ('n:c-,:[#16;!H0]',1),  # N:C-S-[#1]
  465: ('[#7]-,:[#6]-,:[#6]=,:[#6]',1),  # N-C-C=C
  466: ('[#8]=,:[#16]-,:[#6]-,:[#6]',1),  # O=S-C-C
  467: ('N#[#6]-,:[#6]=,:[#6]',1),  # N#C-C=C
  468: ('[#6]=,:[#7]-,:[#7]-,:[#6]',1),  # C=N-N-C
  469: ('[#8]=,:[#16]-,:[#6]-,:[#7]',1),  # O=S-C-N
  470: ('[#16]-,:[#16]-,:c:c',1),  # S-S-C:C
  471: ('c:c-,:[#6]=,:[#6]',1),  # C:C-C=C
  472: ('s:c:c:c',1),  # S:C:C:C
  473: ('c:n:c-,:[#6]',1),  # C:N:C-C
  474: ('[#16]-,:c:n:c',1),  # S-C:N:C
  475: ('s:c:c:n',1),  # S:C:C:N
  476: ('[#16]-,:[#6]=,:[#7]-,:[#6]',1),  # S-C=N-C
  477: ('[#6]-,:[#8]-,:[#6]=,:[#6]',1),  # C-O-C=C
  478: ('[#7]-,:[#7]-,:c:c',1),  # N-N-C:C
  479: ('[#16]-,:[#6]=,:[#7;!H0]',1),  # S-C=N-[#1]
  480: ('[#16]-,:[#6]-,:[#16]-,:[#6]',1),  # S-C-S-C
  481: ('c:s:c-,:[#6]',1),  # C:S:C-C
  482: ('[#8]-,:[#16]-,:c:c',1),  # O-S-C:C
  483: ('c:n-,:c:c',1),  # C:N-C:C
  484: ('[#7]-,:[#16]-,:c:c',1),  # N-S-C:C
  485: ('[#7]-,:c:n:c',1),  # N-C:N:C
  486: ('n:c:c:n',1),  # N:C:C:N
  487: ('[#7]-,:c:n:n',1),  # N-C:N:N
  488: ('[#7]-,:[#6]=,:[#7]-,:[#6]',1),  # N-C=N-C
  489: ('[#7]-,:[#6]=,:[#7;!H0]',1),  # N-C=N-[#1]
  490: ('[#7]-,:[#6]-,:[#16]-,:[#6]',1),  # N-C-S-C
  491: ('[#6]-,:[#6]-,:[#6]=,:[#6]',1),  # C-C-C=C
  492: ('[#6]-,:n:[c;!H0]',1),  # C-N:C-[#1]
  493: ('[#7]-,:c:o:c',1),  # N-C:O:C
  494: ('[#8]=,:[#6]-,:c:c',1),  # O=C-C:C
  495: ('[#8]=,:[#6]-,:c:n',1),  # O=C-C:N
  496: ('[#6]-,:[#7]-,:c:c',1),  # C-N-C:C
  497: ('n:n-,:[#6;!H0]',1),  # N:N-C-[#1]
  498: ('[#8]-,:c:c:n',1),  # O-C:C:N
  499: ('[#8]-,:[#6]=,:[#6]-,:[#6]',1),  # O-C=C-C
  500: ('[#7]-,:c:c:n',1),  # N-C:C:N
  501: ('[#6]-,:[#16]-,:c:c',1),  # C-S-C:C
  502: ('Cl-,:c:c-,:[#6]',1),  # Cl-C:C-C
  503: ('[#7]-,:[#6]=,:[#6;!H0]',1),  # N-C=C-[#1]
  504: ('Cl-,:c:[c;!H0]',1),  # Cl-C:C-[#1]
  505: ('n:c:n-,:[#6]',1),  # N:C:N-C
  506: ('Cl-,:c:c-,:[#8]',1),  # Cl-C:C-O
  507: ('[#6]-,:c:n:c',1),  # C-C:N:C
  508: ('[#6]-,:[#6]-,:[#16]-,:[#6]',1),  # C-C-S-C
  509: ('[#16]=,:[#6]-,:[#7]-,:[#6]',1),  # S=C-N-C
  510: ('Br-,:c:c-,:[#6]',1),  # Br-C:C-C
  511: ('[#7;!H0]-,:[#7;!H0]',1),  # [#1]-N-N-[#1]
  512: ('[#16]=,:[#6]-,:[#7;!H0]',1),  # S=C-N-[#1]
  513: ('[#6]-,:[#33]-,:[#8;!H0]',1),  # C-[As]-O-[#1]
  514: ('s:c:[c;!H0]',1),  # S:C:C-[#1]
  515: ('[#8]-,:[#7]-,:[#6]-,:[#6]',1),  # O-N-C-C
  516: ('[#7]-,:[#7]-,:[#6]-,:[#6]',1),  # N-N-C-C
  517: ('[#6;!H0]=,:[#6;!H0]',1),  # [#1]-C=C-[#1]
  518: ('[#7]-,:[#7]-,:[#6]-,:[#7]',1),  # N-N-C-N
  519: ('[#8]=,:[#6]-,:[#7]-,:[#7]',1),  # O=C-N-N
  520: ('[#7]=,:[#6]-,:[#7]-,:[#6]',1),  # N=C-N-C
  521: ('[#6]=,:[#6]-,:c:c',1),  # C=C-C:C
  522: ('c:n-,:[#6;!H0]',1),  # C:N-C-[#1]
  523: ('[#6]-,:[#7]-,:[#7;!H0]',1),  # C-N-N-[#1]
  524: ('n:c:c-,:[#6]',1),  # N:C:C-C
  525: ('[#6]-,:[#6]=,:[#6]-,:[#6]',1),  # C-C=C-C
  526: ('[#33]-,:c:[c;!H0]',1),  # [As]-C:C-[#1]
  527: ('Cl-,:c:c-,:Cl',1),  # Cl-C:C-Cl
  528: ('c:c:[n;!H0]',1),  # C:C:N-[#1]
  529: ('[#7;!H0]-,:[#6;!H0]',1),  # [#1]-N-C-[#1]
  530: ('Cl-,:[#6]-,:[#6]-,:Cl',1),  # Cl-C-C-Cl
  531: ('n:c-,:c:c',1),  # N:C-C:C
  532: ('[#16]-,:c:c-,:[#6]',1),  # S-C:C-C
  533: ('[#16]-,:c:[c;!H0]',1),  # S-C:C-[#1]
  534: ('[#16]-,:c:c-,:[#7]',1),  # S-C:C-N
  535: ('[#16]-,:c:c-,:[#8]',1),  # S-C:C-O
  536: ('[#8]=,:[#6]-,:[#6]-,:[#6]',1),  # O=C-C-C
  537: ('[#8]=,:[#6]-,:[#6]-,:[#7]',1),  # O=C-C-N
  538: ('[#8]=,:[#6]-,:[#6]-,:[#8]',1),  # O=C-C-O
  539: ('[#7]=,:[#6]-,:[#6]-,:[#6]',1),  # N=C-C-C
  540: ('[#7]=,:[#6]-,:[#6;!H0]',1),  # N=C-C-[#1]
  541: ('[#6]-,:[#7]-,:[#6;!H0]',1),  # C-N-C-[#1]
  542: ('[#8]-,:c:c-,:[#6]',1),  # O-C:C-C
  543: ('[#8]-,:c:[c;!H0]',1),  # O-C:C-[#1]
  544: ('[#8]-,:c:c-,:[#7]',1),  # O-C:C-N
  545: ('[#8]-,:c:c-,:[#8]',1),  # O-C:C-O
  546: ('[#7]-,:c:c-,:[#6]',1),  # N-C:C-C
  547: ('[#7]-,:c:[c;!H0]',1),  # N-C:C-[#1]
  548: ('[#7]-,:c:c-,:[#7]',1),  # N-C:C-N
  549: ('[#8]-,:[#6]-,:c:c',1),  # O-C-C:C
  550: ('[#7]-,:[#6]-,:c:c',1),  # N-C-C:C
  551: ('Cl-,:[#6]-,:[#6]-,:[#6]',1),  # Cl-C-C-C
  552: ('Cl-,:[#6]-,:[#6]-,:[#8]',1),  # Cl-C-C-O
  553: ('c:c-,:c:c',1),  # C:C-C:C
  554: ('[#8]=,:[#6]-,:[#6]=,:[#6]',1),  # O=C-C=C
  555: ('Br-,:[#6]-,:[#6]-,:[#6]',1),  # Br-C-C-C
  556: ('[#7]=,:[#6]-,:[#6]=,:[#6]',1),  # N=C-C=C
  557: ('[#6]=,:[#6]-,:[#6]-,:[#6]',1),  # C=C-C-C
  558: ('n:c-,:[#8;!H0]',1),  # N:C-O-[#1]
  559: ('[#8]=,:[#7]-,:c:c',1),  # O=N-C:C
  560: ('[#8]-,:[#6]-,:[#7;!H0]',1),  # O-C-N-[#1]
  561: ('[#7]-,:[#6]-,:[#7]-,:[#6]',1),  # N-C-N-C
  562: ('Cl-,:[#6]-,:[#6]=,:[#8]',1),  # Cl-C-C=O
  563: ('Br-,:[#6]-,:[#6]=,:[#8]',1),  # Br-C-C=O
  564: ('[#8]-,:[#6]-,:[#8]-,:[#6]',1),  # O-C-O-C
  565: ('[#6]=,:[#6]-,:[#6]=,:[#6]',1),  # C=C-C=C
  566: ('c:c-,:[#8]-,:[#6]',1),  # C:C-O-C
  567: ('[#8]-,:[#6]-,:[#6]-,:[#7]',1),  # O-C-C-N
  568: ('[#8]-,:[#6]-,:[#6]-,:[#8]',1),  # O-C-C-O
  569: ('N#[#6]-,:[#6]-,:[#6]',1),  # N#C-C-C
  570: ('[#7]-,:[#6]-,:[#6]-,:[#7]',1),  # N-C-C-N
  571: ('c:c-,:[#6]-,:[#6]',1),  # C:C-C-C
  572: ('[#6;!H0]-,:[#8;!H0]',1),  # [#1]-C-O-[#1]
  573: ('n:c:n:c',1),  # N:C:N:C
  574: ('[#8]-,:[#6]-,:[#6]=,:[#6]',1),  # O-C-C=C
  575: ('[#8]-,:[#6]-,:c:c-,:[#6]',1),  # O-C-C:C-C
  576: ('[#8]-,:[#6]-,:c:c-,:[#8]',1),  # O-C-C:C-O
  577: ('[#7]=,:[#6]-,:c:[c;!H0]',1),  # N=C-C:C-[#1]
  578: ('c:c-,:[#7]-,:c:c',1),  # C:C-N-C:C
  579: ('[#6]-,:c:c-,:c:c',1),  # C-C:C-C:C
  580: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O=C-C-C-C
  581: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # O=C-C-C-N
  582: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#8]',1),  # O=C-C-C-O
  583: ('[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # C-C-C-C-C
  584: ('Cl-,:c:c-,:[#8]-,:[#6]',1),  # Cl-C:C-O-C
  585: ('c:c-,:[#6]=,:[#6]-,:[#6]',1),  # C:C-C=C-C
  586: ('[#6]-,:c:c-,:[#7]-,:[#6]',1),  # C-C:C-N-C
  587: ('[#6]-,:[#16]-,:[#6]-,:[#6]-,:[#6]',1),  # C-S-C-C-C
  588: ('[#7]-,:c:c-,:[#8;!H0]',1),  # N-C:C-O-[#1]
  589: ('[#8]=,:[#6]-,:[#6]-,:[#6]=,:[#8]',1),  # O=C-C-C=O
  590: ('[#6]-,:c:c-,:[#8]-,:[#6]',1),  # C-C:C-O-C
  591: ('[#6]-,:c:c-,:[#8;!H0]',1),  # C-C:C-O-[#1]
  592: ('Cl-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # Cl-C-C-C-C
  593: ('[#7]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # N-C-C-C-C
  594: ('[#7]-,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # N-C-C-C-N
  595: ('[#6]-,:[#8]-,:[#6]-,:[#6]=,:[#6]',1),  # C-O-C-C=C
  596: ('c:c-,:[#6]-,:[#6]-,:[#6]',1),  # C:C-C-C-C
  597: ('[#7]=,:[#6]-,:[#7]-,:[#6]-,:[#6]',1),  # N=C-N-C-C
  598: ('[#8]=,:[#6]-,:[#6]-,:c:c',1),  # O=C-C-C:C
  599: ('Cl-,:c:c:c-,:[#6]',1),  # Cl-C:C:C-C
  600: ('[#6;!H0]-,:[#6]=,:[#6;!H0]',1),  # [#1]-C-C=C-[#1]
  601: ('[#7]-,:c:c:c-,:[#6]',1),  # N-C:C:C-C
  602: ('[#7]-,:c:c:c-,:[#7]',1),  # N-C:C:C-N
  603: ('[#8]=,:[#6]-,:[#6]-,:[#7]-,:[#6]',1),  # O=C-C-N-C
  604: ('[#6]-,:c:c:c-,:[#6]',1),  # C-C:C:C-C
  605: ('[#6]-,:[#8]-,:[#6]-,:c:c',1),  # C-O-C-C:C
  606: ('[#8]=,:[#6]-,:[#6]-,:[#8]-,:[#6]',1),  # O=C-C-O-C
  607: ('[#8]-,:c:c-,:[#6]-,:[#6]',1),  # O-C:C-C-C
  608: ('[#7]-,:[#6]-,:[#6]-,:c:c',1),  # N-C-C-C:C
  609: ('[#6]-,:[#6]-,:[#6]-,:c:c',1),  # C-C-C-C:C
  610: ('Cl-,:[#6]-,:[#6]-,:[#7]-,:[#6]',1),  # Cl-C-C-N-C
  611: ('[#6]-,:[#8]-,:[#6]-,:[#8]-,:[#6]',1),  # C-O-C-O-C
  612: ('[#7]-,:[#6]-,:[#6]-,:[#7]-,:[#6]',1),  # N-C-C-N-C
  613: ('[#7]-,:[#6]-,:[#8]-,:[#6]-,:[#6]',1),  # N-C-O-C-C
  614: ('[#6]-,:[#7]-,:[#6]-,:[#6]-,:[#6]',1),  # C-N-C-C-C
  615: ('[#6]-,:[#6]-,:[#8]-,:[#6]-,:[#6]',1),  # C-C-O-C-C
  616: ('[#7]-,:[#6]-,:[#6]-,:[#8]-,:[#6]',1),  # N-C-C-O-C
  617: ('c:c:n:n:c',1),  # C:C:N:N:C
  618: ('[#6]-,:[#6]-,:[#6]-,:[#8;!H0]',1),  # C-C-C-O-[#1]
  619: ('c:c-,:[#6]-,:c:c',1),  # C:C-C-C:C
  620: ('[#8]-,:[#6]-,:[#6]=,:[#6]-,:[#6]',1),  # O-C-C=C-C
  621: ('c:c-,:[#8]-,:[#6]-,:[#6]',1),  # C:C-O-C-C
  622: ('[#7]-,:c:c:c:n',1),  # N-C:C:C:N
  623: ('[#8]=,:[#6]-,:[#8]-,:c:c',1),  # O=C-O-C:C
  624: ('[#8]=,:[#6]-,:c:c-,:[#6]',1),  # O=C-C:C-C
  625: ('[#8]=,:[#6]-,:c:c-,:[#7]',1),  # O=C-C:C-N
  626: ('[#8]=,:[#6]-,:c:c-,:[#8]',1),  # O=C-C:C-O
  627: ('[#6]-,:[#8]-,:c:c-,:[#6]',1),  # C-O-C:C-C
  628: ('[#8]=,:[#33]-,:c:c:c',1),  # O=[As]-C:C:C
  629: ('[#6]-,:[#7]-,:[#6]-,:c:c',1),  # C-N-C-C:C
  630: ('[#16]-,:c:c:c-,:[#7]',1),  # S-C:C:C-N
  631: ('[#8]-,:c:c-,:[#8]-,:[#6]',1),  # O-C:C-O-C
  632: ('[#8]-,:c:c-,:[#8;!H0]',1),  # O-C:C-O-[#1]
  633: ('[#6]-,:[#6]-,:[#8]-,:c:c',1),  # C-C-O-C:C
  634: ('[#7]-,:[#6]-,:c:c-,:[#6]',1),  # N-C-C:C-C
  635: ('[#6]-,:[#6]-,:c:c-,:[#6]',1),  # C-C-C:C-C
  636: ('[#7]-,:[#7]-,:[#6]-,:[#7;!H0]',1),  # N-N-C-N-[#1]
  637: ('[#6]-,:[#7]-,:[#6]-,:[#7]-,:[#6]',1),  # C-N-C-N-C
  638: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O-C-C-C-C
  639: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # O-C-C-C-N
  640: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#8]',1),  # O-C-C-C-O
  641: ('[#6]=,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # C=C-C-C-C
  642: ('[#8]-,:[#6]-,:[#6]-,:[#6]=,:[#6]',1),  # O-C-C-C=C
  643: ('[#8]-,:[#6]-,:[#6]-,:[#6]=,:[#8]',1),  # O-C-C-C=O
  644: ('[#6;!H0]-,:[#6]-,:[#7;!H0]',1),  # [#1]-C-C-N-[#1]
  645: ('[#6]-,:[#6]=,:[#7]-,:[#7]-,:[#6]',1),  # C-C=N-N-C
  646: ('[#8]=,:[#6]-,:[#7]-,:[#6]-,:[#6]',1),  # O=C-N-C-C
  647: ('[#8]=,:[#6]-,:[#7]-,:[#6;!H0]',1),  # O=C-N-C-[#1]
  648: ('[#8]=,:[#6]-,:[#7]-,:[#6]-,:[#7]',1),  # O=C-N-C-N
  649: ('[#8]=,:[#7]-,:c:c-,:[#7]',1),  # O=N-C:C-N
  650: ('[#8]=,:[#7]-,:c:c-,:[#8]',1),  # O=N-C:C-O
  651: ('[#8]=,:[#6]-,:[#7]-,:[#6]=,:[#8]',1),  # O=C-N-C=O
  652: ('[#8]-,:c:c:c-,:[#6]',1),  # O-C:C:C-C
  653: ('[#8]-,:c:c:c-,:[#7]',1),  # O-C:C:C-N
  654: ('[#8]-,:c:c:c-,:[#8]',1),  # O-C:C:C-O
  655: ('[#7]-,:[#6]-,:[#7]-,:[#6]-,:[#6]',1),  # N-C-N-C-C
  656: ('[#8]-,:[#6]-,:[#6]-,:c:c',1),  # O-C-C-C:C
  657: ('[#6]-,:[#6]-,:[#7]-,:[#6]-,:[#6]',1),  # C-C-N-C-C
  658: ('[#6]-,:[#7]-,:c:c-,:[#6]',1),  # C-N-C:C-C
  659: ('[#6]-,:[#6]-,:[#16]-,:[#6]-,:[#6]',1),  # C-C-S-C-C
  660: ('[#8]-,:[#6]-,:[#6]-,:[#7]-,:[#6]',1),  # O-C-C-N-C
  661: ('[#6]-,:[#6]=,:[#6]-,:[#6]-,:[#6]',1),  # C-C=C-C-C
  662: ('[#8]-,:[#6]-,:[#8]-,:[#6]-,:[#6]',1),  # O-C-O-C-C
  663: ('[#8]-,:[#6]-,:[#6]-,:[#8]-,:[#6]',1),  # O-C-C-O-C
  664: ('[#8]-,:[#6]-,:[#6]-,:[#8;!H0]',1),  # O-C-C-O-[#1]
  665: ('[#6]-,:[#6]=,:[#6]-,:[#6]=,:[#6]',1),  # C-C=C-C=C
  666: ('[#7]-,:c:c-,:[#6]-,:[#6]',1),  # N-C:C-C-C
  667: ('[#6]=,:[#6]-,:[#6]-,:[#8]-,:[#6]',1),  # C=C-C-O-C
  668: ('[#6]=,:[#6]-,:[#6]-,:[#8;!H0]',1),  # C=C-C-O-[#1]
  669: ('[#6]-,:c:c-,:[#6]-,:[#6]',1),  # C-C:C-C-C
  670: ('Cl-,:c:c-,:[#6]=,:[#8]',1),  # Cl-C:C-C=O
  671: ('Br-,:c:c:c-,:[#6]',1),  # Br-C:C:C-C
  672: ('[#8]=,:[#6]-,:[#6]=,:[#6]-,:[#6]',1),  # O=C-C=C-C
  673: ('[#8]=,:[#6]-,:[#6]=,:[#6;!H0]',1),  # O=C-C=C-[#1]
  674: ('[#8]=,:[#6]-,:[#6]=,:[#6]-,:[#7]',1),  # O=C-C=C-N
  675: ('[#7]-,:[#6]-,:[#7]-,:c:c',1),  # N-C-N-C:C
  676: ('Br-,:[#6]-,:[#6]-,:c:c',1),  # Br-C-C-C:C
  677: ('N#[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # N#C-C-C-C
  678: ('[#6]-,:[#6]=,:[#6]-,:c:c',1),  # C-C=C-C:C
  679: ('[#6]-,:[#6]-,:[#6]=,:[#6]-,:[#6]',1),  # C-C-C=C-C
  680: ('[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # C-C-C-C-C-C
  681: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O-C-C-C-C-C
  682: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]',1),  # O-C-C-C-C-O
  683: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # O-C-C-C-C-N
  684: ('[#7]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # N-C-C-C-C-C
  685: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O=C-C-C-C-C
  686: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # O=C-C-C-C-N
  687: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]',1),  # O=C-C-C-C-O
  688: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]=,:[#8]',1),  # O=C-C-C-C=O
  689: ('[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # C-C-C-C-C-C-C
  690: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O-C-C-C-C-C-C
  691: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]',1),  # O-C-C-C-C-C-O
  692: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # O-C-C-C-C-C-N
  693: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O=C-C-C-C-C-C
  694: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]',1),  # O=C-C-C-C-C-O
  695: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]=,:[#8]',1),  # O=C-C-C-C-C=O
  696: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]',1),  # O=C-C-C-C-C-N
  697: ('[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # C-C-C-C-C-C-C-C
  698: ('[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#6])-,:[#6]',1),  # C-C-C-C-C-C(C)-C
  699: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O-C-C-C-C-C-C-C
  700: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#6])-,:[#6]',1),  # O-C-C-C-C-C(C)-C
  701: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]-,:[#6]',1),  # O-C-C-C-C-C-O-C
  702: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#8])-,:[#6]',1),  # O-C-C-C-C-C(O)-C
  703: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]-,:[#6]',1),  # O-C-C-C-C-C-N-C
  704: ('[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#7])-,:[#6]',1),  # O-C-C-C-C-C(N)-C
  705: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]',1),  # O=C-C-C-C-C-C-C
  706: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#8])-,:[#6]',1),  # O=C-C-C-C-C(O)-C
  707: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](=,:[#8])-,:[#6]',1),  # O=C-C-C-C-C(=O)-C
  708: ('[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#7])-,:[#6]',1),  # O=C-C-C-C-C(N)-C
  709: ('[#6]-,:[#6](-,:[#6])-,:[#6]-,:[#6]',1),  # C-C(C)-C-C
  710: ('[#6]-,:[#6](-,:[#6])-,:[#6]-,:[#6]-,:[#6]',1),  # C-C(C)-C-C-C
  711: ('[#6]-,:[#6]-,:[#6](-,:[#6])-,:[#6]-,:[#6]',1),  # C-C-C(C)-C-C
  712: ('[#6]-,:[#6](-,:[#6])(-,:[#6])-,:[#6]-,:[#6]',1),  # C-C(C)(C)-C-C
  713: ('[#6]-,:[#6](-,:[#6])-,:[#6](-,:[#6])-,:[#6]',1),  # 
  714: ('[#6]c1ccc([#6])cc1',1),  # Cc1ccc(C)cc1
  715: ('[#6]c1ccc([#8])cc1',1),  # Cc1ccc(O)cc1
  716: ('[#6]c1ccc([#16])cc1',1),  # Cc1ccc(S)cc1
  717: ('[#6]c1ccc([#7])cc1',1),  # Cc1ccc(N)cc1
  718: ('[#6]c1ccc(Cl)cc1',1),  # Cc1ccc(Cl)cc1
  719: ('[#6]c1ccc(Br)cc1',1),  # Cc1ccc(Br)cc1
  720: ('[#8]c1ccc([#8])cc1',1),  # Oc1ccc(O)cc1
  721: ('[#8]c1ccc([#16])cc1',1),  # Oc1ccc(S)cc1
  722: ('[#8]c1ccc([#7])cc1',1),  # Oc1ccc(N)cc1
  723: ('[#8]c1ccc(Cl)cc1',1),  # Oc1ccc(Cl)cc1
  724: ('[#8]c1ccc(Br)cc1',1),  # Oc1ccc(Br)cc1
  725: ('[#16]c1ccc([#16])cc1',1),  # Sc1ccc(S)cc1
  726: ('[#16]c1ccc([#7])cc1',1),  # Sc1ccc(N)cc1
  727: ('[#16]c1ccc(Cl)cc1',1),  # Sc1ccc(Cl)cc1
  728: ('[#16]c1ccc(Br)cc1',1),  # Sc1ccc(Br)cc1
  729: ('[#7]c1ccc([#7])cc1',1),  # Nc1ccc(N)cc1
  730: ('[#7]c1ccc(Cl)cc1',1),  # Nc1ccc(Cl)cc1
  731: ('[#7]c1ccc(Br)cc1',1),  # Nc1ccc(Br)cc1
  732: ('Clc1ccc(Cl)cc1',1),  # Clc1ccc(Cl)cc1
  733: ('Clc1ccc(Br)cc1',1),  # Clc1ccc(Br)cc1
  734: ('Brc1ccc(Br)cc1',1),  # Brc1ccc(Br)cc1
  735: ('[#6]c1cc([#6])ccc1',1),  # Cc1cc(C)ccc1
  736: ('[#6]c1cc([#8])ccc1',1),  # Cc1cc(O)ccc1
  737: ('[#6]c1cc([#16])ccc1',1),  # Cc1cc(S)ccc1
  738: ('[#6]c1cc([#7])ccc1',1),  # Cc1cc(N)ccc1
  739: ('[#6]c1cc(Cl)ccc1',1),  # Cc1cc(Cl)ccc1
  740: ('[#6]c1cc(Br)ccc1',1),  # Cc1cc(Br)ccc1
  741: ('[#8]c1cc([#8])ccc1',1),  # Oc1cc(O)ccc1
  742: ('[#8]c1cc([#16])ccc1',1),  # Oc1cc(S)ccc1
  743: ('[#8]c1cc([#7])ccc1',1),  # Oc1cc(N)ccc1
  744: ('[#8]c1cc(Cl)ccc1',1),  # Oc1cc(Cl)ccc1
  745: ('[#8]c1cc(Br)ccc1',1),  # Oc1cc(Br)ccc1
  746: ('[#16]c1cc([#16])ccc1',1),  # Sc1cc(S)ccc1
  747: ('[#16]c1cc([#7])ccc1',1),  # Sc1cc(N)ccc1
  748: ('[#16]c1cc(Cl)ccc1',1),  # Sc1cc(Cl)ccc1
  749: ('[#16]c1cc(Br)ccc1',1),  # Sc1cc(Br)ccc1
  750: ('[#7]c1cc([#7])ccc1',1),  # Nc1cc(N)ccc1
  751: ('[#7]c1cc(Cl)ccc1',1),  # Nc1cc(Cl)ccc1
  752: ('[#7]c1cc(Br)ccc1',1),  # Nc1cc(Br)ccc1
  753: ('Clc1cc(Cl)ccc1',1),  # Clc1cc(Cl)ccc1
  754: ('Clc1cc(Br)ccc1',1),  # Clc1cc(Br)ccc1
  755: ('Brc1cc(Br)ccc1',1),  # Brc1cc(Br)ccc1
  756: ('[#6]c1c([#6])cccc1',1),  # Cc1c(C)cccc1
  757: ('[#6]c1c([#8])cccc1',1),  # Cc1c(O)cccc1
  758: ('[#6]c1c([#16])cccc1',1),  # Cc1c(S)cccc1
  759: ('[#6]c1c([#7])cccc1',1),  # Cc1c(N)cccc1
  760: ('[#6]c1c(Cl)cccc1',1),  # Cc1c(Cl)cccc1
  761: ('[#6]c1c(Br)cccc1',1),  # Cc1c(Br)cccc1
  762: ('[#8]c1c([#8])cccc1',1),  # Oc1c(O)cccc1
  763: ('[#8]c1c([#16])cccc1',1),  # Oc1c(S)cccc1
  764: ('[#8]c1c([#7])cccc1',1),  # Oc1c(N)cccc1
  765: ('[#8]c1c(Cl)cccc1',1),  # Oc1c(Cl)cccc1
  766: ('[#8]c1c(Br)cccc1',1),  # Oc1c(Br)cccc1
  767: ('[#16]c1c([#16])cccc1',1),  # Sc1c(S)cccc1
  768: ('[#16]c1c([#7])cccc1',1),  # Sc1c(N)cccc1
  769: ('[#16]c1c(Cl)cccc1',1),  # Sc1c(Cl)cccc1
  770: ('[#16]c1c(Br)cccc1',1),  # Sc1c(Br)cccc1
  771: ('[#7]c1c([#7])cccc1',1),  # Nc1c(N)cccc1
  772: ('[#7]c1c(Cl)cccc1',1),  # Nc1c(Cl)cccc1
  773: ('[#7]c1c(Br)cccc1',1),  # Nc1c(Br)cccc1
  774: ('Clc1c(Cl)cccc1',1),  # Clc1c(Cl)cccc1
  775: ('Clc1c(Br)cccc1',1),  # Clc1c(Br)cccc1
  776: ('Brc1c(Br)cccc1',1),  # Brc1c(Br)cccc1
  777: ('[#6][#6]1[#6][#6][#6]([#6])[#6][#6]1',1),  # CC1CCC(C)CC1
  778: ('[#6][#6]1[#6][#6][#6]([#8])[#6][#6]1',1),  # CC1CCC(O)CC1
  779: ('[#6][#6]1[#6][#6][#6]([#16])[#6][#6]1',1),  # CC1CCC(S)CC1
  780: ('[#6][#6]1[#6][#6][#6]([#7])[#6][#6]1',1),  # CC1CCC(N)CC1
  781: ('[#6][#6]1[#6][#6][#6](Cl)[#6][#6]1',1),  # CC1CCC(Cl)CC1
  782: ('[#6][#6]1[#6][#6][#6](Br)[#6][#6]1',1),  # CC1CCC(Br)CC1
  783: ('[#8][#6]1[#6][#6][#6]([#8])[#6][#6]1',1),  # OC1CCC(O)CC1
  784: ('[#8][#6]1[#6][#6][#6]([#16])[#6][#6]1',1),  # OC1CCC(S)CC1
  785: ('[#8][#6]1[#6][#6][#6]([#7])[#6][#6]1',1),  # OC1CCC(N)CC1
  786: ('[#8][#6]1[#6][#6][#6](Cl)[#6][#6]1',1),  # OC1CCC(Cl)CC1
  787: ('[#8][#6]1[#6][#6][#6](Br)[#6][#6]1',1),  # OC1CCC(Br)CC1
  788: ('[#16][#6]1[#6][#6][#6]([#16])[#6][#6]1',1),  # SC1CCC(S)CC1
  789: ('[#16][#6]1[#6][#6][#6]([#7])[#6][#6]1',1),  # SC1CCC(N)CC1
  790: ('[#16][#6]1[#6][#6][#6](Cl)[#6][#6]1',1),  # SC1CCC(Cl)CC1
  791: ('[#16][#6]1[#6][#6][#6](Br)[#6][#6]1',1),  # SC1CCC(Br)CC1
  792: ('[#7][#6]1[#6][#6][#6]([#7])[#6][#6]1',1),  # NC1CCC(N)CC1
  793: ('[#7][#6]1[#6][#6][#6](Cl)[#6][#6]1',1),  # NC1CCC(Cl)CC1
  794: ('[#7][#6]1[#6][#6][#6](Br)[#6][#6]1',1),  # NC1CCC(Br)CC1
  795: ('Cl[#6]1[#6][#6][#6](Cl)[#6][#6]1',1),  # ClC1CCC(Cl)CC1
  796: ('Cl[#6]1[#6][#6][#6](Br)[#6][#6]1',1),  # ClC1CCC(Br)CC1
  797: ('Br[#6]1[#6][#6][#6](Br)[#6][#6]1',1),  # BrC1CCC(Br)CC1
  798: ('[#6][#6]1[#6][#6]([#6])[#6][#6][#6]1',1),  # CC1CC(C)CCC1
  799: ('[#6][#6]1[#6][#6]([#8])[#6][#6][#6]1',1),  # CC1CC(O)CCC1
  800: ('[#6][#6]1[#6][#6]([#16])[#6][#6][#6]1',1),  # CC1CC(S)CCC1
  801: ('[#6][#6]1[#6][#6]([#7])[#6][#6][#6]1',1),  # CC1CC(N)CCC1
  802: ('[#6][#6]1[#6][#6](Cl)[#6][#6][#6]1',1),  # CC1CC(Cl)CCC1
  803: ('[#6][#6]1[#6][#6](Br)[#6][#6][#6]1',1),  # CC1CC(Br)CCC1
  804: ('[#8][#6]1[#6][#6]([#8])[#6][#6][#6]1',1),  # OC1CC(O)CCC1
  805: ('[#8][#6]1[#6][#6]([#16])[#6][#6][#6]1',1),  # OC1CC(S)CCC1
  806: ('[#8][#6]1[#6][#6]([#7])[#6][#6][#6]1',1),  # OC1CC(N)CCC1
  807: ('[#8][#6]1[#6][#6](Cl)[#6][#6][#6]1',1),  # OC1CC(Cl)CCC1
  808: ('[#8][#6]1[#6][#6](Br)[#6][#6][#6]1',1),  # OC1CC(Br)CCC1
  809: ('[#16][#6]1[#6][#6]([#16])[#6][#6][#6]1',1),  # SC1CC(S)CCC1
  810: ('[#16][#6]1[#6][#6]([#7])[#6][#6][#6]1',1),  # SC1CC(N)CCC1
  811: ('[#16][#6]1[#6][#6](Cl)[#6][#6][#6]1',1),  # SC1CC(Cl)CCC1
  812: ('[#16][#6]1[#6][#6](Br)[#6][#6][#6]1',1),  # SC1CC(Br)CCC1
  813: ('[#7][#6]1[#6][#6]([#7])[#6][#6][#6]1',1),  # NC1CC(N)CCC1
  814: ('[#7][#6]1[#6][#6](Cl)[#6][#6][#6]1',1),  # NC1CC(Cl)CCC1
  815: ('[#7][#6]1[#6][#6](Br)[#6][#6][#6]1',1),  # NC1CC(Br)CCC1
  816: ('Cl[#6]1[#6][#6](Cl)[#6][#6][#6]1',1),  # ClC1CC(Cl)CCC1
  817: ('Cl[#6]1[#6][#6](Br)[#6][#6][#6]1',1),  # ClC1CC(Br)CCC1
  818: ('Br[#6]1[#6][#6](Br)[#6][#6][#6]1',1),  # BrC1CC(Br)CCC1
  819: ('[#6][#6]1[#6]([#6])[#6][#6][#6][#6]1',1),  # CC1C(C)CCCC1
  820: ('[#6][#6]1[#6]([#8])[#6][#6][#6][#6]1',1),  # CC1C(O)CCCC1
  821: ('[#6][#6]1[#6]([#16])[#6][#6][#6][#6]1',1),  # CC1C(S)CCCC1
  822: ('[#6][#6]1[#6]([#7])[#6][#6][#6][#6]1',1),  # CC1C(N)CCCC1
  823: ('[#6][#6]1[#6](Cl)[#6][#6][#6][#6]1',1),  # CC1C(Cl)CCCC1
  824: ('[#6][#6]1[#6](Br)[#6][#6][#6][#6]1',1),  # CC1C(Br)CCCC1
  825: ('[#8][#6]1[#6]([#8])[#6][#6][#6][#6]1',1),  # OC1C(O)CCCC1
  826: ('[#8][#6]1[#6]([#16])[#6][#6][#6][#6]1',1),  # OC1C(S)CCCC1
  827: ('[#8][#6]1[#6]([#7])[#6][#6][#6][#6]1',1),  # OC1C(N)CCCC1
  828: ('[#8][#6]1[#6](Cl)[#6][#6][#6][#6]1',1),  # OC1C(Cl)CCCC1
  829: ('[#8][#6]1[#6](Br)[#6][#6][#6][#6]1',1),  # OC1C(Br)CCCC1
  830: ('[#16][#6]1[#6]([#16])[#6][#6][#6][#6]1',1),  # SC1C(S)CCCC1
  831: ('[#16][#6]1[#6]([#7])[#6][#6][#6][#6]1',1),  # SC1C(N)CCCC1
  832: ('[#16][#6]1[#6](Cl)[#6][#6][#6][#6]1',1),  # SC1C(Cl)CCCC1
  833: ('[#16][#6]1[#6](Br)[#6][#6][#6][#6]1',1),  # SC1C(Br)CCCC1
  834: ('[#7][#6]1[#6]([#7])[#6][#6][#6][#6]1',1),  # NC1C(N)CCCC1
  835: ('[#7][#6]1[#6](Cl)[#6][#6][#6][#6]1',1),  # NC1C(Cl)CCCC1
  836: ('[#7][#6]1[#6](Br)[#6][#6][#6][#6]1',1),  # NC1C(Br)CCCC1
  837: ('Cl[#6]1[#6](Cl)[#6][#6][#6][#6]1',1),  # ClC1C(Cl)CCCC1
  838: ('Cl[#6]1[#6](Br)[#6][#6][#6][#6]1',1),  # ClC1C(Br)CCCC1
  839: ('Br[#6]1[#6](Br)[#6][#6][#6][#6]1',1),  # BrC1C(Br)CCCC1
  840: ('[#6][#6]1[#6][#6]([#6])[#6][#6]1',1),  # CC1CC(C)CC1
  841: ('[#6][#6]1[#6][#6]([#8])[#6][#6]1',1),  # CC1CC(O)CC1
  842: ('[#6][#6]1[#6][#6]([#16])[#6][#6]1',1),  # CC1CC(S)CC1
  843: ('[#6][#6]1[#6][#6]([#7])[#6][#6]1',1),  # CC1CC(N)CC1
  844: ('[#6][#6]1[#6][#6](Cl)[#6][#6]1',1),  # CC1CC(Cl)CC1
  845: ('[#6][#6]1[#6][#6](Br)[#6][#6]1',1),  # CC1CC(Br)CC1
  846: ('[#8][#6]1[#6][#6]([#8])[#6][#6]1',1),  # OC1CC(O)CC1
  847: ('[#8][#6]1[#6][#6]([#16])[#6][#6]1',1),  # OC1CC(S)CC1
  848: ('[#8][#6]1[#6][#6]([#7])[#6][#6]1',1),  # OC1CC(N)CC1
  849: ('[#8][#6]1[#6][#6](Cl)[#6][#6]1',1),  # OC1CC(Cl)CC1
  850: ('[#8][#6]1[#6][#6](Br)[#6][#6]1',1),  # OC1CC(Br)CC1
  851: ('[#16][#6]1[#6][#6]([#16])[#6][#6]1',1),  # SC1CC(S)CC1
  852: ('[#16][#6]1[#6][#6]([#7])[#6][#6]1',1),  # SC1CC(N)CC1
  853: ('[#16][#6]1[#6][#6](Cl)[#6][#6]1',1),  # SC1CC(Cl)CC1
  854: ('[#16][#6]1[#6][#6](Br)[#6][#6]1',1),  # SC1CC(Br)CC1
  855: ('[#7][#6]1[#6][#6]([#7])[#6][#6]1',1),  # NC1CC(N)CC1
  856: ('[#7][#6]1[#6][#6](Cl)[#6][#6]1',1),  # NC1CC(Cl)CC1
  857: ('[#7][#6]1[#6][#6](Br)[#6][#6]1',1),  # NC1CC(Br)CC1
  858: ('Cl[#6]1[#6][#6](Cl)[#6][#6]1',1),  # ClC1CC(Cl)CC1
  859: ('Cl[#6]1[#6][#6](Br)[#6][#6]1',1),  # ClC1CC(Br)CC1
  860: ('Br[#6]1[#6][#6](Br)[#6][#6]1',1),  # BrC1CC(Br)CC1
  861: ('[#6][#6]1[#6]([#6])[#6][#6][#6]1',1),  # CC1C(C)CCC1
  862: ('[#6][#6]1[#6]([#8])[#6][#6][#6]1',1),  # CC1C(O)CCC1
  863: ('[#6][#6]1[#6]([#16])[#6][#6][#6]1',1),  # CC1C(S)CCC1
  864: ('[#6][#6]1[#6]([#7])[#6][#6][#6]1',1),  # CC1C(N)CCC1
  865: ('[#6][#6]1[#6](Cl)[#6][#6][#6]1',1),  # CC1C(Cl)CCC1
  866: ('[#6][#6]1[#6](Br)[#6][#6][#6]1',1),  # CC1C(Br)CCC1
  867: ('[#8][#6]1[#6]([#8])[#6][#6][#6]1',1),  # OC1C(O)CCC1
  868: ('[#8][#6]1[#6]([#16])[#6][#6][#6]1',1),  # OC1C(S)CCC1
  869: ('[#8][#6]1[#6]([#7])[#6][#6][#6]1',1),  # OC1C(N)CCC1
  870: ('[#8][#6]1[#6](Cl)[#6][#6][#6]1',1),  # OC1C(Cl)CCC1
  871: ('[#8][#6]1[#6](Br)[#6][#6][#6]1',1),  # OC1C(Br)CCC1
  872: ('[#16][#6]1[#6]([#16])[#6][#6][#6]1',1),  # SC1C(S)CCC1
  873: ('[#16][#6]1[#6]([#7])[#6][#6][#6]1',1),  # SC1C(N)CCC1
  874: ('[#16][#6]1[#6](Cl)[#6][#6][#6]1',1),  # SC1C(Cl)CCC1
  875: ('[#16][#6]1[#6](Br)[#6][#6][#6]1',1),  # SC1C(Br)CCC1
  876: ('[#7][#6]1[#6]([#7])[#6][#6][#6]1',1),  # NC1C(N)CCC1
  877: ('[#7][#6]1[#6](Cl)[#6][#6]1',1),  # NC1C(Cl)CC1
  878: ('[#7][#6]1[#6](Br)[#6][#6][#6]1',1),  # NC1C(Br)CCC1
  879: ('Cl[#6]1[#6](Cl)[#6][#6][#6]1',1),  # ClC1C(Cl)CCC1
  880: ('Cl[#6]1[#6](Br)[#6][#6][#6]1',1),  # ClC1C(Br)CCC1
  881: ('Br[#6]1[#6](Br)[#6][#6][#6]1',1),  # BrC1C(Br)CCC1
}

pubchemKeys = None


def _InitKeys(keyList, keyDict):
  """ *Internal Use Only*

   generates SMARTS patterns for the keys, run once

  """
  assert len(keyList) == len(keyDict.keys()), 'length mismatch'
  for key in keyDict.keys():
    patt, count = keyDict[key]
    if patt != '?':
      sma = Chem.MolFromSmarts(patt)
      if not sma:
        print('SMARTS parser error for key #%d: %s' % (key, patt))
      else:
        keyList[key - 1] = sma, count


def _pyGenPubchemKeys(mol, **kwargs):
  """ generates the MACCS fingerprint for a molecules

   **Arguments**

     - mol: the molecule to be fingerprinted

     - any extra keyword arguments are ignored
     
   **Returns**

      a _DataStructs.SparseBitVect_ containing the fingerprint.

  >>> m = Chem.MolFromSmiles('CNO')
  >>> bv = GenPubchemKeys(m)
  >>> tuple(bv.GetOnBits())
  (24, 68, 69, 71, 93, 94, 102, 124, 131, 139, 151, 158, 160, 161, 164)
  >>> bv = GenPubchemKeys(Chem.MolFromSmiles('CCC'))
  >>> tuple(bv.GetOnBits())
  (74, 114, 149, 155, 160)

  """
  global pubchemKeys
  if pubchemKeys is None:
    pubchemKeys = [(None, 0)] * len(smartsPatts.keys())
    _InitKeys(pubchemKeys, smartsPatts)
  ctor = kwargs.get('ctor', DataStructs.SparseBitVect)

  res = ctor(len(pubchemKeys) + 1)
  for i, (patt, count) in enumerate(pubchemKeys):
    if patt is not None:
      if count == 0:
        res[i + 1] = mol.HasSubstructMatch(patt)
      else:
        matches = mol.GetSubstructMatches(patt)
        if len(matches) > count:
          res[i + 1] = 1
    # elif (i + 1) == 125:
    #   # special case: num aromatic rings > 1
    #   ri = mol.GetRingInfo()
    #   nArom = 0
    #   res[125] = 0
    #   for ring in ri.BondRings():
    #     isArom = True
    #     for bondIdx in ring:
    #       if not mol.GetBondWithIdx(bondIdx).GetIsAromatic():
    #         isArom = False
    #         break
    #     if isArom:
    #       nArom += 1
    #       if nArom > 1:
    #         res[125] = 1
    #         break
    elif (i + 1) == 881:
      res[881] = 0
      # special case: num frags > 1
      if len(Chem.GetMolFrags(mol)) > 1:
        res[881] = 1

  return res


GenPubchemKeys = rdMolDescriptors.GetPubchemKeysFingerprint
FingerprintMol = rdMolDescriptors.GetPubchemKeysFingerprint


#------------------------------------
#
#  doctest boilerplate
#
def _test():
  import doctest, sys
  return doctest.testmod(sys.modules["__main__"])


if __name__ == '__main__':
  import sys
  failed, tried = _test()
  sys.exit(failed)
